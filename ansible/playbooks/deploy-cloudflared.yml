---
- name: "Propagate Cloudflared project to remote nodes"
  hosts: "all"
  become: true
  vars:
    CLOUDFLARED_DIR: "/usr/local/cloudflared"

  tasks:
    - name: "Create a timestamp variable"
      set_fact:
        timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

    - name: "Create backup directory if it doesn't exist"
      file:
        path: "{{ CLOUDFLARED_DIR }}_backup"
        state: "directory"
        owner: "root"
        group: "root"
        mode: "0755"

    - name: "Create a zip backup of the Cloudflared project"
      archive:
        path: "{{ CLOUDFLARED_DIR }}"
        dest: "{{ CLOUDFLARED_DIR }}_backup/cloudflared_backup_{{ timestamp }}.zip"
        format: "zip"

- name: "Clean and propagate Cloudflared project to remote nodes"
  hosts: "all"
  become: true
  vars:
    CLOUDFLARED_DIR: "/usr/local/cloudflared"

  tasks:
    - name: "Ensure destination directory exists"
      file:
        path: "{{ CLOUDFLARED_DIR }}"
        state: "directory"
        owner: "root"
        group: "root"
        mode: "0755"

    - name: "Clean the destination directory"
      command: |
        rm -rf {{ CLOUDFLARED_DIR }}/* {{ CLOUDFLARED_DIR }}/.[!.]* {{ CLOUDFLARED_DIR }}/..?*
      ignore_errors: true

    - name: "Copy Cloudflared project to remote nodes"
      synchronize:
        src: "{{ CLOUDFLARED_DIR }}"
        dest: "{{ CLOUDFLARED_DIR }}"
        delete: true
        recursive: true
        rsync_opts:
          - "--chmod=D0755,F0644"

    - name: "Set permissions on Cloudflared project files"
      file:
        path: "{{ CLOUDFLARED_DIR }}"
        state: "directory"
        recurse: true
        owner: "root"
        group: "root"
        mode: "0755"

- name: "Deploy Cloudflared Docker Compose"
  hosts: "all"
  become: true
  vars:
    CLOUDFLARED_DIR: "/usr/local/cloudflared"

  tasks:
    - name: "Initialize Terraform"
      command: "terraform init"
      args:
        chdir: "{{ CLOUDFLARED_DIR }}/terraform"

    - name: "Plan Terraform"
      command: "terraform plan"
      args:
        chdir: "{{ CLOUDFLARED_DIR }}/terraform"

    - name: "Apply Terraform"
      command: "terraform apply -auto-approve"
      args:
        chdir: "{{ CLOUDFLARED_DIR }}/terraform"

    - name: "Verify CF_TUNNEL_TOKEN is defined for current host"
      assert:
        that:
          - "hostvars[inventory_hostname].CF_TUNNEL_TOKEN is defined"
        fail_msg: "Variable CF_TUNNEL_TOKEN is not defined for host {{ inventory_hostname }}"
        success_msg: "Variable CF_TUNNEL_TOKEN is defined for host {{ inventory_hostname }}"

    - name: "Generate .env file with token"
      copy:
        dest: "{{ CLOUDFLARED_DIR }}/.env"
        content: |
          CF_TUNNEL_TOKEN={{ hostvars[inventory_hostname].CF_TUNNEL_TOKEN | default('') }}
      when: "hostvars[inventory_hostname].CF_TUNNEL_TOKEN is defined"

    - name: "Run Docker Compose"
      shell: "docker compose up -d"
      args:
        chdir: "{{ CLOUDFLARED_DIR }}"
      when: "hostvars[inventory_hostname].CF_TUNNEL_TOKEN is defined"
