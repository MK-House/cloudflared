---
- name: "Publish Cloudflared project to remote nodes"
  hosts: "all"
  become: true
  any_errors_fatal: true
  vars:
    CLOUDFLARED_DIR: "/usr/local/cloudflared"

  tasks:
    - name: "Create a timestamp variable"
      set_fact:
        timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

    - name: "Create backup directory if it doesn't exist"
      file:
        path: "{{ CLOUDFLARED_DIR }}_backup"
        state: "directory"
        owner: "root"
        group: "root"
        mode: "0755"

    - name: "Create a zip backup of the Cloudflared project"
      archive:
        path: "{{ CLOUDFLARED_DIR }}"
        dest: "{{ CLOUDFLARED_DIR }}_backup/cloudflared_backup_{{ timestamp }}.zip"
        format: "zip"

- name: "Clean and publish Cloudflared project to remote nodes"
  hosts: "all"
  become: true
  any_errors_fatal: true
  vars:
    CLOUDFLARED_DIR: "/usr/local/cloudflared"

  tasks:
    - name: "Ensure destination directory exists"
      file:
        path: "{{ CLOUDFLARED_DIR }}"
        state: "directory"
        owner: "root"
        group: "root"
        mode: "0755"

    - name: "Clean the destination directory"
      command: |
        rm -rf {{ CLOUDFLARED_DIR }}/* {{ CLOUDFLARED_DIR }}/.[!.]* {{ CLOUDFLARED_DIR }}/..?*
      ignore_errors: true

    - name: "Copy Cloudflared project to remote nodes"
      synchronize:
        src: "{{ CLOUDFLARED_DIR }}"
        dest: "{{ CLOUDFLARED_DIR }}"
        delete: true
        recursive: true
        rsync_opts:
          - "--chmod=D0755,F0644"

    - name: "Set permissions on Cloudflared project files"
      file:
        path: "{{ CLOUDFLARED_DIR }}"
        state: "directory"
        recurse: true
        owner: "root"
        group: "root"
        mode: "0755"

- name: "Install Docker"
  hosts: "all"
  become: true
  any_errors_fatal: true
  tasks:
    - name: "Check if Docker is already installed"
      command: "docker --version"
      register: docker_installed
      ignore_errors: true

    - name: "Update package list"
      apt:
        update_cache: true
      when: docker_installed.failed
    
    - name: "Install required packages"
      apt:
        name:
          - "apt-transport-https"
          - "ca-certificates"
          - "curl"
          - "software-properties-common"
        state: "present"
      when: docker_installed.failed
    
    - name: "Add Docker's official GPG key"
      apt_key:
        url: "https://download.docker.com/linux/ubuntu/gpg"
        state: "present"
      when: docker_installed.failed
    
    - name: "Add Docker repository"
      apt_repository:
        repo: "deb https://download.docker.com/linux/ubuntu focal stable"
        state: "present"
      when: docker_installed.failed
    
    - name: "Update package list after adding Docker repository"
      apt:
        update_cache: true
      when: docker_installed.failed
    
    - name: "Install Docker"
      apt:
        name: "docker-ce"
        state: "present"
      when: docker_installed.failed
    
    - name: "Ensure Docker service is running and enabled"
      service:
        name: "docker"
        state: "started"
        enabled: "true"
      when: docker_installed.failed

    - name: "Add current user to docker group"
      user:
        name: "{{ ansible_user }}"
        groups: "docker"
        append: "true"
      when: docker_installed.failed

- name: "Deploy Cloudflared"
  hosts: "all"
  become: true
  any_errors_fatal: true
  vars:
    CLOUDFLARED_DIR: "/usr/local/cloudflared"

  tasks:
    - name: "Verify CF_TUNNEL_TOKEN is defined for current host"
      assert:
        that:
          - "hostvars[inventory_hostname].CF_TUNNEL_TOKEN is defined"
        fail_msg: "Variable CF_TUNNEL_TOKEN is not defined for host {{ inventory_hostname }}"
        success_msg: "Variable CF_TUNNEL_TOKEN is defined for host {{ inventory_hostname }}"

    - name: "Generate .env file with token"
      copy:
        dest: "{{ CLOUDFLARED_DIR }}/.env"
        content: |
          CF_TUNNEL_TOKEN={{ hostvars[inventory_hostname].CF_TUNNEL_TOKEN | default('') }}
      when: "hostvars[inventory_hostname].CF_TUNNEL_TOKEN is defined"

    - name: "Check if Docker network exists"
      command: |
        docker network inspect mkhouse-vpc-net
      register: "network_check"
      ignore_errors: true

    - name: "Create Docker network if it does not exist"
      command: |
        docker network create --driver bridge mkhouse-vpc-net
      when: "network_check.failed"

    - name: "Pull Docker Compose services"
      command: |
        docker compose -f {{ CLOUDFLARED_DIR }}/docker/docker-compose.yml pull
      args:
        chdir: "{{ CLOUDFLARED_DIR }}"

    - name: "Start Docker Compose services"
      command: |
        docker compose -f {{ CLOUDFLARED_DIR }}/docker/docker-compose.yml up -d --force-recreate --remove-orphans --build
      args:
        chdir: "{{ CLOUDFLARED_DIR }}"

    - name: "Prune unused Docker images"
      command: "docker image prune --force"
